[build-system]
requires = [
    "scikit-build-core>=0.10",
    "pybind11>=2.11.0",
    "cmake>=3.15",
    "ninja",
    "setuptools>=42",
    "wheel"
]
build-backend = "scikit_build_core.build"

[project]
name = "cccgpu"
version = "0.2.1"
description = "The Clustermatch Correlation Coefficient (CCC) with GPU acceleration"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "BSD-2-Clause Plus Patent"}
authors = [
    {name = "Milton Pividori", email = "milton.pividori@cuanschutz.edu"},
    {name = "Haoyu Zhang", email = "haoyu_z@outlook.com"},
]
dependencies = [
    "numpy>=1.21.0",
    "scipy",
    "numba",
    "pandas",
    "scikit-learn",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
]

[tool.scikit-build]
# Configure scikit-build-core
cmake.version = ">=3.15"
cmake.args = [
    "-DCMAKE_CUDA_ARCHITECTURES=75",  # Adjust for your target CUDA architecture
]
build.verbose = true
wheel.packages = ["libs/ccc"]  # Directory containing your Python packages
wheel.exclude = ["*.cpp", "*.h"]  # Exclude C++ headers from wheel
wheel.py-api = "cp310"  # Python API version
wheel.platlib = true  # Contains compiled extensions

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.cibuildwheel]
# Build for Python 3.10-3.14 on Linux and Windows x86_64
build = "cp310-* cp311-* cp312-* cp313-* cp314-*"
skip = "pp* *-musllinux* *-manylinux_i686 *-manylinux_aarch64 *-win32 *-win_arm64"

# Linux-specific configuration
[tool.cibuildwheel.linux]
before-all = """
    yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo && \
    yum clean all && \
    yum install -y cuda-toolkit-12-8 ninja-build && \
    echo "CUDA installation completed"
"""
environment = {CUDA_HOME="/usr/local/cuda-12.8", PATH="/usr/local/cuda-12.8/bin:$PATH", LD_LIBRARY_PATH="/usr/local/cuda-12.8/lib64:$LD_LIBRARY_PATH", CMAKE_CUDA_COMPILER="/usr/local/cuda-12.8/bin/nvcc", CUDACXX="/usr/local/cuda-12.8/bin/nvcc"}
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel} --plat manylinux2014_x86_64"
manylinux-x86_64-image = "manylinux2014"

# Windows-specific configuration
[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel} --add-path C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.8\\bin"

# Test configuration
test-command = "python -c \"import ccc_cuda_ext; print('CUDA extension imported successfully')\""
test-requires = ["numpy", "scipy", "numba", "pandas", "scikit-learn"]
